package com.pozatticaique.hrpayroll.services;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pozatticaique.hrpayroll.entities.Payment;

@Service
public class PaymentService {	
	private final WorkerFeignClient workerFeignClient;

    @Autowired
    public PaymentService(WorkerFeignClient workerFeignClient) {
        this.workerFeignClient = workerFeignClient;
    }

    public Payment getPayment(long workerId, int days) {
        Worker worker = workerFeignClient.findById(workerId).getBody();
        return new Payment(worker.getName(), worker.getDailyIncome(), days);
    }
}
Neste exemplo, não utilizamos o RestTemplate, apenas a classe WorkerFeignClient para fazer a chamada HTTP. Certifique-se de que a sua classe WorkerFeignClient esteja corretamente anotada com @FeignClient e que o serviço "hr-worker" esteja registrado corretamente no Service Registry (por exemplo, Eureka).

Agora, para habilitar o balanceamento de carga com o Spring Cloud LoadBalancer, você precisará configurar o WebClient como um bean gerenciado pelo Spring, anotando-o com @LoadBalanced:

java
Copy code
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
public class WebClientConfig {

    @Bean
    @LoadBalanced
    public WebClient.Builder webClientBuilder() {
        return WebClient.builder();
    }
}
Certifique-se de que a classe WebClientConfig esteja no mesmo pacote ou em um pacote escaneado pelo Spring para que a configuração seja corretamente detectada.

Com essa configuração, o Spring Cloud LoadBalancer irá cuidar do balanceamento de carga automaticamente quando o Feign Client fizer chamadas HTTP para o serviço "hr-worker". O WebClient Builder anotado com @LoadBalanced é que habilita esse comportamento.

Espero que esta abordagem seja útil para o seu cenário. Se você tiver mais dúvidas ou precisar de mais ajuda, sinta-se à vontade para perguntar.




User
E na camada resource preciso acrescentar algo? @Service
public class PaymentService {	
	/*
	//Variavel que foi criada dentro do Application.Properties
	@Value("${hr-worker.host}")
	private String workerHost;*/
			
	@Autowired
	private WorkerFeignClient workerFeignClient;
	
	@Transactional
	public Payment getPayment(long workerId, int days) {
		/*Map<String, String> uriVariables = new HashMap<>();
		uriVariables.put("id", toString(workerId));
		Worker worker = workerFeignClient.getForObject(workerHost + "/workers/{id}", Worker.class, uriVariables);
		*/
		Worker worker = workerFeignClient.findById(workerId).getBody();
		return new Payment(worker.getName(), worker.getDailyIncome(), days);
	}
ChatGPT
Na camada resource (controlador), não é necessário fazer nenhuma alteração específica para o balanceamento de carga com o Spring Cloud LoadBalancer. O balanceamento de carga é tratado pela infraestrutura internamente e não requer nenhuma configuração adicional na camada de recursos.

A camada de serviço PaymentService é a responsável por fazer a chamada para o serviço "hr-worker" usando o Feign Client, que já está configurado com o balanceamento de carga usando o Spring Cloud LoadBalancer, conforme discutido nas respostas anteriores.

Sendo assim, a sua classe PaymentResource (ou outra classe de controlador que faça chamadas ao serviço) pode continuar exatamente como estava antes:

java
Copy code
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class PaymentResource {
    
    @Autowired
    private PaymentService paymentService;

    @GetMapping(value = "/payments/{workerId}/days/{days}")
    public ResponseEntity<Payment> getPayment(@PathVariable Long workerId, @PathVariable Integer days) {
        Payment payment = paymentService.getPayment(workerId, days);
        return ResponseEntity.ok().body(payment);
    }

	/*
	//Variavel que foi criada dentro do Application.Properties
	@Value("${hr-worker.host}")
	private String workerHost;
			
	@Autowired
	private WorkerFeignClient workerFeignClient;
	*/
	
	/*@Transactional*/
	
	/*public Payment getPayment(long workerId, int days) {
		Map<String, String> uriVariables = new HashMap<>();
		uriVariables.put("id", toString(workerId));
		Worker worker = workerFeignClient.getForObject(workerHost + "/workers/{id}", Worker.class, uriVariables);
		
		Worker worker = workerFeignClient.findById(workerId).getBody();
		return new Payment(worker.getName(), worker.getDailyIncome(), days);
	}*/
	
	/*
	private String toString(long workerId) {		
		String longForString = String.valueOf(workerId);		
		return longForString;	
	}
	*/

}
