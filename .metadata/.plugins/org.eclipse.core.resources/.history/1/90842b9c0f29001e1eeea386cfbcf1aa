package com.pozatticaique.hrpayroll.services;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pozatticaique.hrpayroll.entities.Payment;

@Service
public class PaymentService {	
	 @Autowired
	 private LoadBalancerClient loadBalancerClient;

	 
	 public Payment getPayment(long workerId, int days) {
	        // Obtendo a instância balanceada do serviço "hr-worker"
	        ServiceInstance serviceInstance = loadBalancerClient.choose("hr-worker");

	        // Construindo a URL completa para a chamada ao serviço
	        String serviceUrl = serviceInstance.getUri().toString() + "/workers/{workerId}/days/{days}";

	        // Fazendo a chamada HTTP usando a biblioteca padrão do Java (ou outra biblioteca de sua preferência)
	        // Aqui, estou usando a biblioteca java.net.HttpURLConnection como exemplo, mas você pode usar outras bibliotecas como o Apache HttpClient ou o OkHttp.
	        URL url = new URL(serviceUrl);
	        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
	        connection.setRequestMethod("GET");

	        // Fazendo a leitura da resposta (você pode ajustar isso de acordo com sua implementação)
	        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
	        String response = reader.lines().collect(Collectors.joining());

	        // Convertendo a resposta para a classe de modelo (você pode ajustar isso de acordo com sua implementação)
	        ObjectMapper mapper = new ObjectMapper();
	        Payment payment = mapper.readValue(response, Payment.class);

	        return payment;
	    }
	}

	/*
	//Variavel que foi criada dentro do Application.Properties
	@Value("${hr-worker.host}")
	private String workerHost;
			
	@Autowired
	private WorkerFeignClient workerFeignClient;
	*/
	
	/*@Transactional*/
	
	/*public Payment getPayment(long workerId, int days) {
		Map<String, String> uriVariables = new HashMap<>();
		uriVariables.put("id", toString(workerId));
		Worker worker = workerFeignClient.getForObject(workerHost + "/workers/{id}", Worker.class, uriVariables);
		
		Worker worker = workerFeignClient.findById(workerId).getBody();
		return new Payment(worker.getName(), worker.getDailyIncome(), days);
	}*/
	
	/*
	private String toString(long workerId) {		
		String longForString = String.valueOf(workerId);		
		return longForString;	
	}
	*/
}
